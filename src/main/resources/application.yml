server:
  port: 8033

spring:
  kafka:
#    bootstrap-servers: ${KAFKA_HOST}:${KAFKA_PORT}
    bootstrap-servers: ${KAFKA_HOST}:${KAFKA_PORT}
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
  datasource:
    url: jdbc:mysql://${DB_HOST}:${DB_PORT}/${INITIAL_DB}?useSSL=false&serverTimezone=Asia/Seoul&characterEncoding=utf8&allowPublicKeyRetrieval=true&rewriteBatchedStatements=true&profileSQL=true&logger=Slf4JLogger
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    hikari:
      minimum-idle: 5
      maximum-pool-size: 20
      idle-timeout: 30000
      connection-timeout: 20000
      max-lifetime: 1800000
  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
  sql:
    init:
      mode: always
      schema-locations: classpath:/schema.sql
      data-locations: classpath:/sql/data1.sql, classpath:/sql/data2.sql
      #classpath:/sql/data3.sql, classpath:/sql/data4.sql, classpath:/sql/data5.sql, classpath:/sql/data6.sql, classpath:/sql/data7.sql, classpath:/sql/data8.sql, classpath:/sql/data9.sql, classpath:/sql/data10.sql
  jwt:
    secret: ${JWT_SECRET}
  jpa:
    defer-datasource-initialization: true

    open-in-view: false
    generate-ddl: true
    show-sql: true
    properties:
      hibernate.default_batch_fetch_size: 1000
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        jdbc:
          batch_size: 1000
          time_zone: Asia/Seoul
          show_sql: true
          format_sql: true
          fetch_size: 1000
        hbm2ddl.auto: ${SPRING_DATASOURCE_DDL_AUTO}
    repositories:
      enabled: true

logging:
  level:
    org:
      springframework:
        security: DEBUG
      hibernate:
        SQL: DEBUG
        type: trace

app:
  jwt:
    secret: ${APP_JWT_SECRET}
    expiration: ${APP_JWT_EXPIRATION}
  open-ai:
    api-key: ${OPEN_AI_API_KEY}

  client:
    url: ${CLIENT_URL}
  host:
    url: ${HOST_URL}
  aligo:
#    나중에 변경할 것
#    api-key: ${ALIGO_API_KEY}
#    user-id: ${ALIGO_USER_ID}
#    sender-key: ${ALIGO_SENDER_KEY}
#    tpl-code: ${ALIGO_TPL_CODE}
#    sender-phone-number: ${ALIGO_SENDER_PHONE_NUMBER}

    api-key: change_later
    user-id: change_later
    sender-key: change_later
    tpl-code: change_later
    sender-phone-number: change_later
